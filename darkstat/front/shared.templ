package front

import (
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/common/types"
	"github.com/darklab8/go-utils/goutils/utils/utils_types"
	"github.com/darklab8/fl-configs/configs/configs_export"
	"strconv"
	"fmt"
	"strings"
)

templ TabContent() {
	<div id="tab-content" role="tabpanel" class="tab-content">
		{ children... }
	</div>
	<style>
		body {
			background-color: #EFEFEF;
			font-weight: 500;
			width: calc(100% - 10px);
		}
		th, td {
			padding-left: 5px;
			padding-bottom: 2px;
			padding-top: 2px;
			padding-right: 5px;
		}

		th, td {
			border-width: 1px;
			border-style: solid;
			border-color: #D7D7D7;
		}
		table {
			border-collapse: separate; 
			position: relative;
		}
		th {
			border-color: #8B8B8B;

			cursor: pointer;
			&:hover {
				background-color: #CCC;
			}

			background: #EFEFEF;
			position: sticky;
  			top: 0; /* Don't forget this, required for the stickiness */
			
		}
		td {
			border-color: #D7D7D7;
		}
		tbody {
			& tr {
				cursor: pointer;
				&:hover {
					background-color: #CCC;
				}
			}
		}
		.splitter {
			display: flex;
			flex-direction: row;
	
			& #table-wrapper {
				width: 75%;
				
				& #table-top {
					overflow: scroll;
					height: calc(65vh - 65px) !important;
					border-style: solid;
    				border-width: 2px;
					border-color: #D7D7D7;
				}
				& #table-bottom {
					overflow: scroll;
					height: 35vh;
					border-style: solid;
    				border-width: 2px;
					border-color: #D7D7D7;
				}
			}
			& #infocard_view {
				width: 25%;
				overflow-y: scroll;
				height: calc(100vh - 65px) !important;
				border-style: solid;
				border-width: 2px;
				border-color: #D7D7D7;
			}

			.sortable {
				width: 100%;
				min-width: 800px;

				& th, td {
					white-space: nowrap;
				}
			}
		}
		
	</style>
}

templ Heading() {
	<style>
		.heading {
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			min-height: 30px;
		}
		.right {
			margin: 10px;
			
		}
		.left {
			align-self: stretch;
		}
	</style>
	<div class="heading">
		<div class="left">
			{ children... }
		</div>
		<div class="right">
			@templ.Raw(types.GetCtx(ctx).Heading)
		</div>
	</div>
}

type ShowEmpty bool

type ShowAllMode bool

templ Button(text string, get_url utils_types.FilePath, is_selected bool) {
	<button
		preload="mouseover"
		hx-trigger="mousedown"
		hx-trigger="mousedown"
		hx-get={ types.GetCtx(ctx).SiteRoot + get_url.ToString() }
		class={ templ.KV("selected", is_selected) }
		role="tab"
		aria-selected="false"
		aria-controls="tab-content"
	>{ text }</button>
}

templ TabMenu(url utils_types.FilePath, mode ShowEmpty) {
	<style>
	.tab-list {
		height: 100%;
		display: flex;
    	flex-wrap: wrap;
    	flex-direction: row;
		align-content: stretch;

		.selected {
			filter: brightness(85%);
		}
		& button {
			min-width: 80px;
		}
	}
	</style>
	@Heading() {
		<style>
		button {
			cursor: pointer;
		}
		</style>
		<div class="tab-list" role="tablist">
			if mode == false {
				@Button("Bases", urls.Bases, urls.Bases == url)
				@Button("Factions", urls.Factions, urls.Factions == url)
				@Button("Rephacks", urls.Rephacks, urls.Rephacks == url)
				@Button("Commodities", urls.Commodities, urls.Commodities == url)
				@Button("Guns", urls.Guns, urls.Guns == url)
				@Button("Gun Modifiers", urls.GunModifiers, urls.GunModifiers == url)
				@Button("Missiles", urls.Missiles, urls.Missiles == url)
				@Button("Mines", urls.Mines, urls.Mines == url)
				@Button("Shields", urls.Shields, urls.Shields == url)
				@Button("Thrusters", urls.Thrusters, urls.Thrusters == url)
				@Button("Ships", urls.Ships, urls.Ships == url)
				@Button("Ship Details", urls.ShipDetails, urls.ShipDetails == url)
				@Button("Tractors", urls.Tractors, urls.Tractors == url)
				@Button("Engines", urls.Engines, urls.Engines == url)
				@Button("CMs", urls.CounterMeasures, urls.CounterMeasures == url)
				<button preload="mouseover" hx-trigger="mousedown" style="width:150px;" hx-get={ types.GetCtx(ctx).SiteRoot + AllItemsUrl(url).ToString() } role="tab" aria-selected="false" aria-controls="tab-content">Show All</button>
			} else {
				@Button("Bases", AllItemsUrl(urls.Bases), urls.Bases == url)
				@Button("Factions", AllItemsUrl(urls.Factions), urls.Factions == url)
				@Button("Rephacks", AllItemsUrl(urls.Rephacks), urls.Rephacks == url)
				@Button("Commodities", AllItemsUrl(urls.Commodities), urls.Commodities == url)
				@Button("Guns", AllItemsUrl(urls.Guns), urls.Guns == url)
				@Button("Gun Modifiers", AllItemsUrl(urls.GunModifiers), urls.GunModifiers == url)
				@Button("Missiles", AllItemsUrl(urls.Missiles), urls.Missiles == url)
				@Button("Mines", AllItemsUrl(urls.Mines), urls.Mines == url)
				@Button("Shields", AllItemsUrl(urls.Shields), urls.Shields == url)
				@Button("Thrusters", AllItemsUrl(urls.Thrusters), urls.Thrusters == url)
				@Button("Ships", AllItemsUrl(urls.Ships), urls.Ships == url)
				@Button("Ship Details", AllItemsUrl(urls.ShipDetails), urls.ShipDetails == url)
				@Button("Tractors", AllItemsUrl(urls.Tractors), urls.Tractors == url)
				@Button("Engines", AllItemsUrl(urls.Engines), urls.Engines == url)
				@Button("CMs", AllItemsUrl(urls.CounterMeasures), urls.CounterMeasures == url)
				<button preload="mouseover" hx-trigger="mousedown" style="width:150px;" hx-get={ types.GetCtx(ctx).SiteRoot + NotAllItemsUrl(url).ToString() } role="tab" aria-selected="false" aria-controls="tab-content">Don't Show All</button>
			}
		</div>
	}
	<hr/>
}

templ InfocardShared() {
	<style>
		.infocard {
			margin: 10px;

			.infocard_p {
				margin-top: 10px;
				margin-bottom: 10px;
			}
		}
	</style>
	<div class="infocard">
		<h3>infocard</h3>
		{ children... }
	</div>
}

templ Infocard(info *configs_export.Infocard) {
	@InfocardShared() {
		for _, line := range info.Lines {
			<p class="infocard_p">{ line }</p>
		}
	}
}

func JoinClickTriggers(first_id string, second_id string) string {
	return `
	<script>
	document.getElementById('` + first_id + `').addEventListener('mousedown', () => {
		document.getElementById('` + second_id + `').click();
	});
	</script>
	`
}

templ GoodAtBaseSharedT(show_price_per_volume ShowPricePerVolume) {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="width:250px;">Base</th>
				<th style="width:100px;">Faction</th>
				<th style="width:50px;">System</th>
				<th style="width:50px;">Price</th>
				if show_price_per_volume {
					<th style="width:50px;">Price Per Volume</th>
				}
				<th style="width:50px;">Base Sells</th>
				<th style="width:50px;">Level Req'd</th>
				<th style="width:50px;">Reputation Req'd</th>
				<th style="width:50px;">Base Nickname</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

type ShowPricePerVolume bool

templ GoodAtBaseInfoT(base_infos []configs_export.GoodAtBase, show_price_per_volume ShowPricePerVolume) {
	@GoodAtBaseSharedT(show_price_per_volume) {
		for _, base_info := range base_infos {
			<tr
				hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(configs_export.InfocardKey(base_info.BaseNickname)) }
				hx-trigger="click"
				hx-target="#infocard_view"
				hx-swap="innerHTML"
				preload="mouseover"
			>
				<td>{ base_info.BaseName }</td>
				<td>{ base_info.Faction }</td>
				<td>{ base_info.SystemName }</td>
				<td>{ strconv.Itoa(base_info.Price) }</td>
				if show_price_per_volume {
					<td>{ fmt.Sprintf("%.2f", base_info.PricePerVolume) }</td>
				}
				<td>{ strconv.FormatBool(base_info.BaseSells) }</td>
				<td>{ strconv.Itoa(base_info.LevelRequired) }</td>
				<td>{ fmt.Sprintf("%.2f", base_info.RepRequired) }</td>
				<td>{ base_info.BaseNickname }</td>
				<td></td>
			</tr>
		}
	}
}

func AllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return "all_" + url
}
func NotAllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return utils_types.FilePath(strings.ReplaceAll(url.ToString(), "all_", ""))
}
