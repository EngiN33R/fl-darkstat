"""
Django settings for fldarknet project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import secrets
import os
from dotenv import load_dotenv

basedir = os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(basedir, '.env'))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
ROOT_DIR = Path(__file__).resolve().parent.parent

if os.environ.get('FREELANCER_FOLDER'):
    FREELANCER_FOLDER = os.environ.get('FREELANCER_FOLDER').replace(" ","")
else:
    FREELANCER_FOLDER = 'Freelancer'
FREELANCER_DIR = os.environ.get('FREELANCER_DIR') or os.path.join(ROOT_DIR,FREELANCER_FOLDER)

DATA_DIR = os.path.join(FREELANCER_DIR,'DATA')

EQUIPMENT_DIR = os.path.join(DATA_DIR,'EQUIPMENT')
SERVICE_DIR = os.path.join(FREELANCER_DIR,'SERVICE')
INFOCARDS_PATH = os.path.join(SERVICE_DIR,'infocards.txt')
UNIVERSE_DIR = os.path.join(DATA_DIR,'UNIVERSE')
SHIPS_DIR = os.path.join(DATA_DIR,'SHIPS')

DARK_PARSE = (os.environ.get('DARK_PARSE') and 'true' in os.environ.get('DARK_PARSE'))
DARK_SAVE = (os.environ.get('DARK_SAVE') and 'true' in os.environ.get('DARK_SAVE'))
DARK_LOAD = (os.environ.get('DARK_LOAD') and 'true' in os.environ.get('DARK_LOAD'))
DARK_COPY = (os.environ.get('DARK_COPY') and 'true' in os.environ.get('DARK_COPY'))

DARK_COPY_NAME = 'dark_copy' or os.environ.get('DARK_COPY_NAME')
DARK_COPY_DIR = os.environ.get('DARK_COPY_DIR') or os.path.join(ROOT_DIR,DARK_COPY_NAME)

# GOODS_DIR = os.path.join(EQUIPMENT_DIR,'goods.ini')
# MARKET_DIR = os.path.join(EQUIPMENT_DIR,'market_commodities.ini')
# SEL_EQUIP_DIR = os.path.join(EQUIPMENT_DIR,'select_equip.ini')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY') or secrets.token_hex(32) #'6*i&e67x=p9ley%1+f8nm1^4cz@g+8*1_)gmbft(t47me&u+$9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'main.apps.MainConfig',
    'ship.apps.ShipConfig',
    'commodities.apps.CommoditiesConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fldarknet.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(ROOT_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fldarknet.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': ROOT_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': 'file:memdb1?mode=memory&cache=shared',
  }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
